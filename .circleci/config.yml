version: 2.1

jobs:
  build:
    docker:
      - image: circleci/ruby:latest-node-browsers
    steps:
      - checkout

      - run:
          name: Install system dependencies
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get -y install webp imagemagick git-lfs

      - run:
          name: Configure imagemagick with higher memory limit
          command: |
            sudo sed -i 's/name="memory" value="256MiB"/name="memory" value="2GiB"/g' /etc/ImageMagick-6/policy.xml
            sudo sed -i 's/name="disk" value="1GiB"/name="disk" value="8GiB"/g' /etc/ImageMagick-6/policy.xml

      - run:
          name: Git LFS
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            ssh git@github.com git-lfs-authenticate "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" download
            git lfs pull

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}-{{ checksum "yarn.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Install bundler dependencies
          command: bundle install --jobs=4 --retry=3 --path vendor/bundle

      - run:
          Name: Install node dependencies
          command: yarn

      - save_cache:
          paths:
            - ./vendor/bundle
            - ./node_modules
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}-{{ checksum "yarn.lock" }}

      - run:
          name: Build
          command: yarn build
          environment:
            JEKYLL_ENV: production

      - persist_to_workspace:
          root: ./
          paths:
            - _site

  deploy:
    docker:
      - image: circleci/python:latest

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Install dependencies
          command: sudo pip install awscli

      - run:
          name: Deploy to S3
          command: |
            aws s3 cp /tmp/workspace/_site/ s3://alexplescan.com/ --recursive --include "*" --exclude "generated/*" --exclude "assets/fonts/*"
            aws s3 cp /tmp/workspace/_site/generated/ s3://alexplescan.com/generated/ --recursive --cache-control max-age=31104000
            aws s3 cp /tmp/workspace/_site/assets/fonts/ s3://alexplescan.com/assets/fonts/ --recursive --cache-control max-age=31104000

      - run:
          name: Invalidate CloudFront distribution
          command: aws cloudfront create-invalidation --distribution-id E3NNO0QKNYIJYL --paths "/*"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
